
==================== FINAL INTERFACE ====================
2016-07-25 18:51:33.172882 UTC

interface leap-0.0.0-4uYVmwBGJQhBRFIbJzqiyG:LeapYear 8001
  interface hash: 0dc227ba4437dd55486f63c605591ff7
  ABI hash: 0f82b2bc1fcc14dba6ebd40a609f7227
  export-list hash: 8fbaeac34c63d1794af1e533b79bad48
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: a4046e0fdab24403354cf30558c1ea1c
  sig of: Nothing
  used TH splices: False
  where
exports:
  LeapYear.isLeapYear
module dependencies:
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:GHC.Real 08bf4acb5f2508f89d6fbcd57fe232e9
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
595ea298b16d685116e7c5cef01f825a
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   LeapYear.$trModule2
                   LeapYear.$trModule1) -}
578e735257c01bb523e50da34c8751f5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "LeapYear"#) -}
4249775fe050723e8243163f6e906112
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "leap-0.0.0-4uYVmwBGJQhBRFIbJzqiyG"#) -}
6baa06d52b1d5be975391f6ef7a96578
  isLeapYear :: GHC.Real.Integral a => a -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLLLLLL),U(1*U,A,A,C(C1(U)),A,A,A,A,A)><L,U>,
     Unfolding: (\ @ a ($dIntegral :: GHC.Real.Integral a) (eta :: a) ->
                 let {
                   $dReal :: GHC.Real.Real a = GHC.Real.$p1Integral @ a $dIntegral
                 } in
                 let {
                   $dNum :: GHC.Num.Num a = GHC.Real.$p1Real @ a $dReal
                 } in
                 let {
                   $dEq :: GHC.Classes.Ord a = GHC.Real.$p2Real @ a $dReal
                 } in
                 let {
                   $dEq1 :: GHC.Classes.Eq a = GHC.Classes.$p1Ord @ a $dEq
                 } in
                 case GHC.Classes.==
                        @ a
                        $dEq1
                        (GHC.Real.rem
                           @ a
                           $dIntegral
                           eta
                           (GHC.Num.fromInteger @ a $dNum LeapYear.isLeapYear4))
                        (GHC.Num.fromInteger @ a $dNum LeapYear.isLeapYear3) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case GHC.Classes./=
                             @ a
                             $dEq1
                             (GHC.Real.rem
                                @ a
                                $dIntegral
                                eta
                                (GHC.Num.fromInteger @ a $dNum LeapYear.isLeapYear2))
                             (GHC.Num.fromInteger @ a $dNum LeapYear.isLeapYear3) of wild1 {
                        GHC.Types.False
                        -> GHC.Classes.==
                             @ a
                             $dEq1
                             (GHC.Real.rem
                                @ a
                                $dIntegral
                                eta
                                (GHC.Num.fromInteger @ a $dNum LeapYear.isLeapYear1))
                             (GHC.Num.fromInteger @ a $dNum LeapYear.isLeapYear3)
                        GHC.Types.True -> GHC.Types.True } }) -}
f987a29f59992d2259a9661cb4750bbb
  isLeapYear1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (400) -}
cdb68b8b70bf7eb7640e6ff1154f8411
  isLeapYear2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (100) -}
1bb6a0a7484ec4fee6db74161390538e
  isLeapYear3 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
b118b7101db732e6521d93140da19281
  isLeapYear4 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (4) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

